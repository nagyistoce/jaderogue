package jade.path;

import jade.core.World;
import jade.util.Coord;
import java.util.List;

/**
 * Represents a path finding algorithm.
 */
public abstract class Path
{
    /**
     * Returns the path from start to end on the given World. This method
     * returns null if the path generated by calcPath does not connect start to
     * end. This does not mean there is no connecting path, only that this
     * particular Path did not find one given its constraints.
     * @param world the world on which the path is calculated
     * @param start the start of the path
     * @param end the end of the path
     * @return the calculated path, or null if there is none
     */
    public final List<Coord> getPath(World world, Coord start, Coord end)
    {
        List<Coord> path = calcPath(world, start, end);
        return path.get(path.size() - 1).equals(end) ? path : null;
    }

    /**
     * Returns true if getPath would return a non-null result.
     * @param world the world on which the path is calculated
     * @param start the start of the path
     * @param end the end of the path
     * @return true if getPath would return a non-null result
     */
    public final boolean hasPath(World world, Coord start, Coord end)
    {
        return getPath(world, start, end) != null;
    }

    /**
     * Performs the calculation of the path from start to end on the given
     * World. Note that this method should never return null. If no path is
     * found with the pathfinding algorithm, either a partial path or an empty
     * path will be returned instead. If incomplete paths are not usable, then
     * getPath is prefered.
     * @param world the world on which the path is calculated
     * @param start the start of the path
     * @param end the end of the path
     * @return the calculated path from start to end
     */
    public abstract List<Coord> calcPath(World world, Coord start, Coord end);
}
